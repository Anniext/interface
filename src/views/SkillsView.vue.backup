<template>
    <div
        class="skills-page min-h-screen bg-linear-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
        <!-- 背景粒子效果 -->
        <div class="absolute inset-0 pointer-events-none">
            <canvas
                ref="backgroundCanvasRef"
                class="w-full h-full opacity-30"></canvas>
        </div>

        <div class="container mx-auto px-4 py-16 relative z-10">
            <!-- 页面标题 -->
            <div ref="titleRef" class="text-center mb-16">
                <h1 class="text-4xl md:text-6xl font-bold text-white mb-6">
                    <span
                        class="bg-linear-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                        技能展示
                    </span>
                </h1>
                <p class="text-xl text-gray-300 max-w-2xl mx-auto">
                    4年游戏后端开发经验，掌握多种编程语言和技术栈
                </p>
            </div>

            <!-- 技能雷达图区域 -->
            <div ref="radarSectionRef" class="mb-16">
                <div
                    class="bg-white/10 backdrop-blur-sm rounded-xl p-8 border border-white/20">
                    <h2
                        class="text-2xl font-bold text-white mb-8 text-center flex items-center justify-center">
                        <div
                            class="w-8 h-8 bg-linear-to-r from-blue-500 to-purple-500 rounded-full mr-3 flex items-center justify-center">
                            <svg
                                class="w-4 h-4 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20">
                                <path
                                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        技能雷达图
                    </h2>
                    <div class="flex justify-center">
                        <div class="relative">
                            <canvas
                                ref="radarCanvasRef"
                                :width="radarSize * pixelRatio"
                                :height="radarSize * pixelRatio"
                                :style="{
                                    width: `${radarSize}px`,
                                    height: `${radarSize}px`,
                                }"
                                class="rounded-lg"></canvas>
                            <!-- 雷达图图例 -->
                            <div
                                class="absolute -right-48 top-0 space-y-2 hidden lg:block">
                                <div
                                    v-for="(category, index) in radarData"
                                    :key="category.skill"
                                    class="flex items-center space-x-2 text-sm">
                                    <div
                                        class="w-3 h-3 rounded-full"
                                        :style="{
                                            backgroundColor: radarColors[index],
                                        }"></div>
                                    <span class="text-gray-300">{{
                                        category.skill
                                    }}</span>
                                    <span class="text-white font-semibold">{{
                                        category.value.toFixed(1)
                                    }}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 技术栈标签云物理交互区域 -->
            <div ref="tagCloudSectionRef" class="mb-16 relative z-10">
                <div
                    class="bg-white/10 backdrop-blur-sm rounded-xl p-8 border border-white/20 relative">
                    <h2
                        class="text-2xl font-bold text-white mb-8 text-center flex items-center justify-center">
                        <div
                            class="w-8 h-8 bg-linear-to-r from-green-500 to-blue-500 rounded-full mr-3 flex items-center justify-center">
                            <svg
                                class="w-4 h-4 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20">
                                <path
                                    d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
                            </svg>
                        </div>
                        技术栈标签云
                        <button
                            @click="resetTagCloud"
                            class="ml-4 px-3 py-1 bg-purple-600 hover:bg-purple-700 rounded text-sm transition-colors">
                            重置
                        </button>
                        <button
                            @click="testSkillsData"
                            class="ml-2 px-3 py-1 bg-green-600 hover:bg-green-700 rounded text-sm transition-colors">
                            测试数据
                        </button>
                    </h2>
                    <!-- 临时调试信息 -->
                    <div
                        class="mb-4 p-3 bg-black/60 rounded text-white text-sm">
                        <div>
                            skillsData 状态:
                            {{ skillsData ? "已加载" : "未加载" }}
                        </div>
                        <div>topSkills 数量: {{ topSkills.length }}</div>
                        <div v-if="topSkills.length > 0">
                            技能列表:
                            {{ topSkills.map((s) => s.name).join(", ") }}
                        </div>
                        <div v-else class="text-yellow-300">
                            ⚠️ 没有找到等级 >= 7 的技能
                        </div>
                    </div>

                    <div class="relative z-10" style="min-height: 400px">
                        <SkillDropEffect
                            ref="skillDropRef"
                            :skills="topSkills"
                            :width="800"
                            :height="400"
                            :show-controls="false"
                            :auto-start="false"
                            @skill-clicked="handleSkillClick"
                            @drop-complete="handleDropComplete" />
                    </div>
                </div>
            </div>

            <!-- 编程语言进度条动画区域 -->
            <div ref="progressSectionRef" class="mb-16">
                <div
                    class="bg-white/10 backdrop-blur-sm rounded-xl p-8 border border-white/20">
                    <h2
                        class="text-2xl font-bold text-white mb-8 text-center flex items-center justify-center">
                        <div
                            class="w-8 h-8 bg-linear-to-r from-orange-500 to-red-500 rounded-full mr-3 flex items-center justify-center">
                            <svg
                                class="w-4 h-4 text-white"
                                fill="currentColor"
                                viewBox="0 0 20 20">
                                <path
                                    d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" />
                            </svg>
                        </div>
                        编程语言能力
                    </h2>
                    <div class="grid md:grid-cols-2 gap-6">
                        <div
                            v-for="skill in programmingLanguages"
                            :key="skill.id"
                            ref="skillCardRefs"
                            class="skill-card bg-white/5 rounded-lg p-6 hover:bg-white/10 transition-all duration-300 hover:scale-105">
                            <div class="flex items-center mb-4">
                                <div
                                    class="w-12 h-12 rounded-lg mr-4 flex items-center justify-center"
                                    :style="{
                                        backgroundColor: skill.color + '20',
                                        borderColor: skill.color,
                                        color: skill.color,
                                    }"
                                    style="border-width: 2px">
                                    <div
                                        v-if="skill.icon"
                                        class="w-6 h-6"
                                        v-html="getSkillIcon(skill.icon)"></div>
                                </div>
                                <div class="flex-1">
                                    <h4
                                        class="text-white font-semibold text-lg">
                                        {{ skill.name }}
                                    </h4>
                                    <p class="text-gray-400 text-sm">
                                        {{ skill.experience }}年经验 •
                                        {{ getSkillLevelLabel(skill.level) }}
                                    </p>
                                </div>
                                <div class="text-right">
                                    <div
                                        class="text-2xl font-bold"
                                        :style="{ color: skill.color }">
                                        {{ skill.level }}/10
                                    </div>
                                </div>
                            </div>

                            <!-- 技能进度条 -->
                            <div class="mb-4">
                                <div
                                    class="w-full bg-gray-700 rounded-full h-3 overflow-hidden">
                                    <div
                                        :ref="
                                            (el: any) =>
                                                setProgressBarRef(el, skill.id)
                                        "
                                        class="h-full rounded-full transition-all duration-1000 ease-out"
                                        :style="{
                                            backgroundColor: skill.color,
                                            width: '0%',
                                        }"></div>
                                </div>
                            </div>

                            <!-- 技能描述 -->
                            <p class="text-gray-300 text-sm leading-relaxed">
                                {{ skill.description }}
                            </p>

                            <!-- 技能等级指示器 -->
                            <div class="flex justify-center mt-4 space-x-1">
                                <div
                                    v-for="i in 10"
                                    :key="i"
                                    class="w-2 h-2 rounded-full transition-all duration-300"
                                    :class="
                                        i <= skill.level
                                            ? 'opacity-100'
                                            : 'opacity-30'
                                    "
                                    :style="{
                                        backgroundColor: skill.color,
                                    }"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 技能统计概览 -->
            <div ref="statsSectionRef" class="mb-16">
                <div
                    class="bg-white/10 backdrop-blur-sm rounded-xl p-8 border border-white/20">
                    <h2 class="text-2xl font-bold text-white mb-8 text-center">
                        技能统计概览
                    </h2>
                    <div class="grid md:grid-cols-4 gap-6">
                        <div
                            v-for="stat in skillStats"
                            :key="stat.label"
                            ref="statCardRefs"
                            class="text-center">
                            <div
                                class="text-4xl font-bold mb-2"
                                :style="{ color: stat.color }">
                                <span ref="statNumberRef">0</span>
                                <span v-if="stat.suffix">{{
                                    stat.suffix
                                }}</span>
                            </div>
                            <div class="text-gray-300 text-sm">
                                {{ stat.label }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 返回按钮 -->
            <div class="text-center">
                <router-link
                    to="/"
                    class="inline-flex items-center px-6 py-3 bg-linear-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white rounded-lg font-semibold transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-xl">
                    <svg
                        class="w-5 h-5 mr-2"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24">
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    返回首页
                </router-link>
            </div>
        </div>
    </div>
</template>

<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount, computed, nextTick } from "vue";
import { gsap } from "gsap";
import { useAppStore } from "@/stores";
import { useScrollTrigger } from "@/composables/useScrollTrigger";
import SkillDropEffect from "@/components/physics/SkillDropEffect.vue";
import { getSkillsData, generateSkillRadarData } from "@/utils/skills-data";
import { SKILL_LEVEL_LABELS } from "@/types/skills";
import { fadeIn, countUp } from "@/utils/animation";
import type { ISkillsData } from "@/types/skills";

// 使用应用状态和组合式函数
const appStore = useAppStore();
const { createEnterAnimation, createScrollTrigger } = useScrollTrigger();

// 响应式引用
const titleRef = ref<HTMLElement>();
const radarSectionRef = ref<HTMLElement>();
const tagCloudSectionRef = ref<HTMLElement>();
const progressSectionRef = ref<HTMLElement>();
const statsSectionRef = ref<HTMLElement>();
const backgroundCanvasRef = ref<HTMLCanvasElement>();
const radarCanvasRef = ref<HTMLCanvasElement>();
const skillDropRef = ref<InstanceType<typeof SkillDropEffect>>();
const skillCardRefs = ref<HTMLElement[]>([]);
const statCardRefs = ref<HTMLElement[]>([]);
const statNumberRef = ref<HTMLElement[]>([]);

// 数据状态
const skillsData = ref<ISkillsData | null>(null);
const pixelRatio = window.devicePixelRatio || 1;
const radarSize = 400;

// 进度条引用映射
const progressBarRefs = new Map<string, HTMLElement>();

// 计算属性
const programmingLanguages = computed(() => {
    if (!skillsData.value) return [];
    const langCategory = skillsData.value.skillCategories.find(
        (cat) => cat.id === "programming-languages",
    );
    return langCategory?.skills || [];
});

const topSkills = computed(() => {
    if (!skillsData.value) {
        console.log("技能数据未加载，返回空数组");
        return [];
    }

    try {
        const allSkills = skillsData.value.skillCategories.flatMap(
            (cat) => cat.skills,
        );
        console.log("所有技能数量:", allSkills.length);

        const filteredSkills = allSkills.filter((skill) => skill.level >= 7);
        console.log("等级>=7的技能数量:", filteredSkills.length);

        const topSkillsResult = filteredSkills.slice(0, 12).map((skill) => ({
            id: skill.id,
            name: skill.name,
            level: skill.level,
            color: skill.color,
            icon: skill.icon,
        }));

        console.log("最终的 topSkills:", topSkillsResult);
        return topSkillsResult;
    } catch (error) {
        console.error("计算 topSkills 时出错:", error);
        return [];
    }
});

const radarData = computed(() => {
    if (!skillsData.value) return [];
    return generateSkillRadarData(skillsData.value);
});

const radarColors = [
    "#3B82F6", // 蓝色
    "#10B981", // 绿色
    "#8B5CF6", // 紫色
    "#F59E0B", // 橙色
    "#EF4444", // 红色
    "#06B6D4", // 青色
    "#EC4899", // 粉色
    "#7C3AED", // 深紫色
];

const skillStats = computed(() => {
    if (!skillsData.value) return [];
    const allSkills = skillsData.value.skillCategories.flatMap(
        (cat) => cat.skills,
    );
    const avgLevel =
        allSkills.reduce((sum, skill) => sum + skill.level, 0) /
        allSkills.length;
    const totalExp = Math.max(...allSkills.map((skill) => skill.experience));
    const expertSkills = allSkills.filter((skill) => skill.level >= 8).length;

    return [
        {
            label: "技能总数",
            value: allSkills.length,
            color: "#3B82F6",
            suffix: "",
        },
        {
            label: "平均等级",
            value: avgLevel,
            color: "#10B981",
            suffix: "",
        },
        {
            label: "工作经验",
            value: totalExp,
            color: "#F59E0B",
            suffix: "年",
        },
        {
            label: "专家级技能",
            value: expertSkills,
            color: "#EF4444",
            suffix: "",
        },
    ];
});

/**
 * 设置进度条引用
 */
const setProgressBarRef = (el: any, skillId: string) => {
    if (el) {
        progressBarRefs.set(skillId, el as HTMLElement);
    }
};

/**
 * 获取技能等级标签
 */
const getSkillLevelLabel = (level: number): string => {
    return SKILL_LEVEL_LABELS[level] || "未知";
};

/**
 * 获取技能图标
 */
const getSkillIcon = (iconName: string): string => {
    // 简化的图标映射，实际项目中可以使用图标库
    const icons: Record<string, string> = {
        golang: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M1.811 10.231c-.047 0-.058-.023-.035-.059l.246-.315c.023-.035.081-.058.128-.058h4.172c.046 0 .058.035.035.07l-.199.303c-.023.036-.082.059-.117.059H1.811zM.047 11.306c-.047 0-.059-.023-.035-.058l.245-.316c.023-.035.082-.058.129-.058h5.516c.047 0 .07.035.058.07l-.093.28c-.012.047-.058.082-.105.082H.047zM2.828 12.394c-.047 0-.059-.035-.035-.07l.163-.292c.023-.035.070-.070.117-.070h2.337c.047 0 .070.035.070.082l-.023.28c0 .047-.047.070-.082.070H2.828zM21.918 11.025c-.199.326-.559.652-1.049.652-.49 0-.793-.326-.793-.652 0-.326.303-.652.793-.652.49 0 .85.326 1.049.652zM22.589 10.315c-.012-.047-.035-.082-.082-.082h-1.049c-.047 0-.082.035-.082.082v3.956c0 .047.035.082.082.082h1.049c.047 0 .082-.035.082-.082v-3.956z"/></svg>`,
        python: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M14.25.18l.9.2.73.26.59.3.45.32.34.34.25.34.16.33.1.3.04.26.02.2-.01.13V8.5l-.05.63-.13.55-.21.46-.26.38-.3.31-.33.25-.35.19-.35.14-.33.1-.3.07-.26.04-.21.02H8.77l-.69.05-.59.14-.5.22-.41.27-.33.32-.27.35-.2.36-.15.37-.1.35-.07.32-.04.27-.02.21v3.06H3.17l-.21-.03-.28-.07-.32-.12-.35-.18-.36-.26-.36-.36-.35-.46-.32-.59-.28-.73-.21-.88-.14-1.05-.05-1.23.06-1.22.16-1.04.24-.87.32-.71.36-.57.4-.44.42-.33.42-.24.4-.16.36-.1.32-.05.24-.01h.16l.06.01h8.16v-.83H6.18l-.01-2.75-.02-.37.05-.34.11-.31.17-.28.25-.26.31-.23.38-.2.44-.18.51-.15.58-.12.64-.1.71-.06.77-.04.84-.02 1.27.05zm-6.3 1.98l-.23.33-.08.41.08.41.23.34.33.22.41.09.41-.09.33-.22.23-.34.08-.41-.08-.41-.23-.33-.33-.22-.41-.09-.41.09zm13.09 3.95l.28.06.32.12.35.18.36.27.36.35.35.47.32.59.28.73.21.88.14 1.04.05 1.23-.06 1.23-.16 1.04-.24.86-.32.71-.36.57-.4.45-.42.33-.42.24-.4.16-.36.09-.32.05-.24.02-.16-.01h-8.22v.82h5.84l.01 2.76.02.36-.05.34-.11.31-.17.29-.25.25-.31.24-.38.2-.44.17-.51.15-.58.13-.64.09-.71.07-.77.04-.84.01-1.27-.04-1.07-.14-.9-.2-.73-.25-.59-.3-.45-.33-.34-.34-.25-.34-.16-.33-.1-.3-.04-.25-.02-.2.01-.13v-5.34l.05-.64.13-.54.21-.46.26-.38.3-.32.33-.24.35-.2.35-.14.33-.1.3-.06.26-.04.21-.02.13-.01h5.84l.69-.05.59-.14.5-.21.41-.28.33-.32.27-.35.2-.36.15-.36.1-.35.07-.32.04-.28.02-.21V6.07h2.09l.14.01zm-6.47 14.25l-.23.33-.08.41.08.41.23.33.33.23.41.08.41-.08.33-.23.23-.33.08-.41-.08-.41-.23-.33-.33-.23-.41-.08-.41.08z"/></svg>`,
        cpp: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M22.394 6c-.167-.29-.398-.543-.652-.69L12.926.22c-.509-.294-1.34-.294-1.848 0L2.26 5.31c-.508.293-.923 1.013-.923 1.6v10.18c0 .294.104.62.271.91.167.29.398.543.652.69l8.816 5.09c.508.293 1.34.293 1.848 0l8.816-5.09c.254-.147.485-.4.652-.69.167-.29.27-.616.27-.91V6.91c.003-.294-.1-.62-.268-.91zM12 19.11c-3.92 0-7.109-3.19-7.109-7.11 0-3.92 3.19-7.11 7.109-7.11a7.133 7.133 0 016.156 3.553l-3.076 1.78a3.567 3.567 0 00-3.08-1.78A3.56 3.56 0 008.444 12 3.56 3.56 0 0012 15.555a3.57 3.57 0 003.08-1.778l3.078 1.78A7.135 7.135 0 0112 19.11zm7.11-6.715h-.79V11.61h-.79v.785h-.79v.79h.79v.785h.79v-.785h.79v-.79zm2.962 0h-.79V11.61h-.79v.785h-.79v.79h.79v.785h.79v-.785h.79v-.79z"/></svg>`,
        rust: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>`,
        typescript: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z"/></svg>`,
        csharp: `<svg viewBox="0 0 24 24" fill="currentColor"><path d="M1.194 7.543v8.913c0 1.103.588 2.122 1.544 2.674l7.756 4.456c.956.552 2.133.552 3.088 0l7.756-4.456c.956-.552 1.544-1.571 1.544-2.674V7.543c0-1.103-.588-2.122-1.544-2.674L13.582.413c-.956-.552-2.133-.552-3.088 0L2.738 4.869c-.956.552-1.544 1.571-1.544 2.674z"/><path d="M12 3.847l-7.756 4.456v8.913L12 21.672l7.756-4.456V8.303L12 3.847z" fill="#fff"/><path d="M12 5.504l-6.635 3.831v7.33L12 20.496l6.635-3.831v-7.33L12 5.504z" fill="#239120"/><path d="M12 7.161l-5.514 3.184v6.31L12 19.839l5.514-3.184v-6.31L12 7.161z" fill="#fff"/><path d="M12 8.818l-4.393 2.537v5.29L12 19.182l4.393-2.537v-5.29L12 8.818z" fill="#239120"/></svg>`,
    };
    return icons[iconName] || "";
};

/**
 * 初始化背景粒子效果
 */
const initBackgroundParticles = () => {
    const canvas = backgroundCanvasRef.value;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // 设置画布尺寸
    const resizeCanvas = () => {
        canvas.width = window.innerWidth * pixelRatio;
        canvas.height = window.innerHeight * pixelRatio;
        canvas.style.width = `${window.innerWidth}px`;
        canvas.style.height = `${window.innerHeight}px`;
        ctx.scale(pixelRatio, pixelRatio);
    };

    resizeCanvas();

    // 粒子数组
    const particles: Array<{
        x: number;
        y: number;
        vx: number;
        vy: number;
        size: number;
        opacity: number;
        color: string;
    }> = [];

    // 创建粒子
    const createParticles = () => {
        const particleCount = Math.min(50, Math.floor(window.innerWidth / 20));
        for (let i = 0; i < particleCount; i++) {
            particles.push({
                x: Math.random() * window.innerWidth,
                y: Math.random() * window.innerHeight,
                vx: (Math.random() - 0.5) * 0.5,
                vy: (Math.random() - 0.5) * 0.5,
                size: Math.random() * 2 + 1,
                opacity: Math.random() * 0.5 + 0.2,
                color:
                    radarColors[
                        Math.floor(Math.random() * radarColors.length)
                    ] || "#3B82F6",
            });
        }
    };

    // 更新粒子
    const updateParticles = () => {
        particles.forEach((particle) => {
            particle.x += particle.vx;
            particle.y += particle.vy;

            // 边界检测
            if (particle.x < 0 || particle.x > window.innerWidth) {
                particle.vx *= -1;
            }
            if (particle.y < 0 || particle.y > window.innerHeight) {
                particle.vy *= -1;
            }
        });
    };

    // 渲染粒子
    const renderParticles = () => {
        ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);

        particles.forEach((particle) => {
            ctx.beginPath();
            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
            ctx.fillStyle = particle.color;
            ctx.globalAlpha = particle.opacity;
            ctx.fill();
        });

        ctx.globalAlpha = 1;
    };

    // 动画循环
    const animate = () => {
        updateParticles();
        renderParticles();
        requestAnimationFrame(animate);
    };

    createParticles();
    animate();

    // 窗口大小变化时重新调整
    window.addEventListener("resize", resizeCanvas);
};

/**
 * 绘制技能雷达图
 */
const drawSkillRadar = () => {
    const canvas = radarCanvasRef.value;
    if (!canvas || !radarData.value.length) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    const centerX = radarSize / 2;
    const centerY = radarSize / 2;
    const maxRadius = radarSize / 2 - 40;
    const levels = 5;
    const angleStep = (Math.PI * 2) / radarData.value.length;

    // 清空画布
    ctx.clearRect(0, 0, radarSize, radarSize);

    // 绘制背景网格
    ctx.strokeStyle = "rgba(255, 255, 255, 0.1)";
    ctx.lineWidth = 1;

    // 绘制同心圆
    for (let i = 1; i <= levels; i++) {
        const radius = (maxRadius / levels) * i;
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
        ctx.stroke();
    }

    // 绘制射线
    radarData.value.forEach((_, index) => {
        const angle = angleStep * index - Math.PI / 2;
        const x = centerX + Math.cos(angle) * maxRadius;
        const y = centerY + Math.sin(angle) * maxRadius;

        ctx.beginPath();
        ctx.moveTo(centerX, centerY);
        ctx.lineTo(x, y);
        ctx.stroke();
    });

    // 绘制数据区域
    ctx.beginPath();
    radarData.value.forEach((item, index) => {
        const angle = angleStep * index - Math.PI / 2;
        const radius = (item.value / item.max) * maxRadius;
        const x = centerX + Math.cos(angle) * radius;
        const y = centerY + Math.sin(angle) * radius;

        if (index === 0) {
            ctx.moveTo(x, y);
        } else {
            ctx.lineTo(x, y);
        }
    });
    ctx.closePath();

    // 填充数据区域
    const gradient = ctx.createRadialGradient(
        centerX,
        centerY,
        0,
        centerX,
        centerY,
        maxRadius,
    );
    gradient.addColorStop(0, "rgba(59, 130, 246, 0.3)");
    gradient.addColorStop(1, "rgba(59, 130, 246, 0.1)");
    ctx.fillStyle = gradient;
    ctx.fill();

    // 描边数据区域
    ctx.strokeStyle = "#3B82F6";
    ctx.lineWidth = 2;
    ctx.stroke();

    // 绘制数据点
    radarData.value.forEach((item, index) => {
        const angle = angleStep * index - Math.PI / 2;
        const radius = (item.value / item.max) * maxRadius;
        const x = centerX + Math.cos(angle) * radius;
        const y = centerY + Math.sin(angle) * radius;

        ctx.beginPath();
        ctx.arc(x, y, 4, 0, Math.PI * 2);
        ctx.fillStyle = radarColors[index] || "#3B82F6";
        ctx.fill();
        ctx.strokeStyle = "#ffffff";
        ctx.lineWidth = 2;
        ctx.stroke();
    });

    // 绘制标签
    ctx.fillStyle = "#ffffff";
    ctx.font = "12px Inter, sans-serif";
    ctx.textAlign = "center";

    radarData.value.forEach((item, index) => {
        const angle = angleStep * index - Math.PI / 2;
        const labelRadius = maxRadius + 20;
        const x = centerX + Math.cos(angle) * labelRadius;
        const y = centerY + Math.sin(angle) * labelRadius;

        ctx.fillText(item.skill, x, y + 4);
    });
};

/**
 * 动画进度条
 */
const animateProgressBars = () => {
    programmingLanguages.value.forEach((skill, index) => {
        const progressBar = progressBarRefs.get(skill.id);
        if (progressBar) {
            gsap.to(progressBar, {
                width: `${(skill.level / 10) * 100}%`,
                duration: 1.5,
                delay: index * 0.2,
                ease: "power2.out",
            });
        }
    });
};

/**
 * 动画统计数字
 */
const animateStatNumbers = () => {
    skillStats.value.forEach((stat, index) => {
        const numberElement = statNumberRef.value[index];
        if (numberElement) {
            countUp(numberElement, stat.value, {
                duration: 2,
                delay: index * 0.3,
            });
        }
    });
};

/**
 * 处理技能点击
 */
const handleSkillClick = (skill: any) => {
    console.log("技能被点击:", skill);
    // 可以添加技能详情展示逻辑
};

/**
 * 处理掉落完成
 */
const handleDropComplete = () => {
    console.log("技能掉落动画完成");
};

/**
 * 重置标签云
 */
const resetTagCloud = () => {
    skillDropRef.value?.resetSkills();
};

/**
 * 测试技能数据
 */
const testSkillsData = async () => {
    console.log("=== 测试技能数据 ===");
    console.log("skillsData.value:", skillsData.value);
    console.log("topSkills.value:", topSkills.value);
    console.log("skillDropRef.value:", skillDropRef.value);

    if (!skillsData.value) {
        console.log("重新加载技能数据...");
        await loadSkillsData();
    }

    if (skillDropRef.value) {
        console.log("刷新组件数据...");
        skillDropRef.value.refreshSkills();
    }
};

/**
 * 初始化滚动动画
 */
const initScrollAnimations = () => {
    // 标题动画
    if (titleRef.value) {
        fadeIn(titleRef.value, { duration: 1, delay: 0.2 });
    }

    // 各个区域的进入动画
    createEnterAnimation(".skill-card", {
        opacity: 1,
        y: 0,
        scale: 1,
        duration: 0.8,
        stagger: 0.1,
    });

    // 雷达图区域动画
    createScrollTrigger({
        trigger: radarSectionRef.value!,
        start: "top 80%",
        onEnter: () => {
            setTimeout(() => {
                drawSkillRadar();
            }, 300);
        },
    });

    // 标签云区域动画
    createScrollTrigger({
        trigger: tagCloudSectionRef.value!,
        start: "top 70%",
        onEnter: () => {
            console.log("标签云区域进入视口，准备启动掉落效果");
            setTimeout(() => {
                console.log("开始执行掉落效果，topSkills:", topSkills.value);
                if (skillDropRef.value && topSkills.value.length > 0) {
                    skillDropRef.value.startDropEffect();
                } else {
                    console.warn("无法启动掉落效果：", {
                        hasRef: !!skillDropRef.value,
                        skillsCount: topSkills.value.length,
                    });
                }
            }, 500);
        },
    });

    // 进度条区域动画
    createScrollTrigger({
        trigger: progressSectionRef.value!,
        start: "top 70%",
        onEnter: () => {
            setTimeout(() => {
                animateProgressBars();
            }, 300);
        },
    });

    // 统计区域动画
    createScrollTrigger({
        trigger: statsSectionRef.value!,
        start: "top 80%",
        onEnter: () => {
            setTimeout(() => {
                animateStatNumbers();
            }, 300);
        },
    });
};

/**
 * 加载技能数据
 */
const loadSkillsData = async () => {
    try {
        const data = await getSkillsData();
        skillsData.value = data;
        console.log("技能数据加载完成:", data);
        console.log("skillsData.value 已更新:", skillsData.value);

        // 强制触发计算属性更新
        await nextTick();
        console.log("topSkills 计算结果:", topSkills.value);

        // 强制触发组件更新
        if (skillDropRef.value && topSkills.value.length > 0) {
            console.log("强制更新 SkillDropEffect 组件");
            skillDropRef.value.refreshSkills();
        }
    } catch (error) {
        console.error("加载技能数据失败:", error);
    }
};

// 生命周期
onMounted(async () => {
    appStore.setCurrentSection("skills");
    document.title = "技能展示 - 交互式简历网站";

    // 加载数据
    await loadSkillsData();

    // 等待DOM更新
    await nextTick();

    // 初始化各种效果
    initBackgroundParticles();
    initScrollAnimations();
});

onBeforeUnmount(() => {
    // 清理事件监听器
    window.removeEventListener("resize", () => {});
});
</script>

<style scoped>
.skills-page {
    font-family: "Inter", system-ui, sans-serif;
}

.container {
    max-width: 1200px;
}

/* 技能卡片样式 */
.skill-card {
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
}

.skill-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    border-color: rgba(255, 255, 255, 0.2);
}

/* 雷达图样式 */
canvas {
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.2);
}

/* 进度条动画 */
.skill-card .h-full {
    transform-origin: left center;
    box-shadow: 0 0 10px currentColor;
}

/* 响应式适配 */
@media (max-width: 1024px) {
    .lg\:block {
        display: none !important;
    }
}

@media (max-width: 768px) {
    .text-4xl {
        font-size: 2rem;
    }

    .md\:text-6xl {
        font-size: 2.5rem;
    }

    .grid {
        grid-template-columns: 1fr;
    }

    .md\:grid-cols-2 {
        grid-template-columns: 1fr;
    }

    .lg\:grid-cols-3 {
        grid-template-columns: 1fr;
    }

    .md\:grid-cols-4 {
        grid-template-columns: repeat(2, 1fr);
    }

    .container {
        padding-left: 1rem;
        padding-right: 1rem;
    }

    .skill-card {
        padding: 1rem;
    }
}

@media (max-width: 480px) {
    .text-4xl {
        font-size: 1.5rem;
    }

    .md\:text-6xl {
        font-size: 2rem;
    }

    .md\:grid-cols-4 {
        grid-template-columns: 1fr;
    }
}

/* 动画效果 */
@keyframes float {
    0%,
    100% {
        transform: translateY(0px);
    }
    50% {
        transform: translateY(-10px);
    }
}

.skill-card:hover {
    animation: float 3s ease-in-out infinite;
}

/* 滚动条样式 */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
}
</style>
